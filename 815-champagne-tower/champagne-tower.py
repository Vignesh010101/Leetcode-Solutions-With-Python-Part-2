class Solution:
    def champagneTower(self, poured: int, query_row: int, query_glass: int) -> float:
        return min((lambda func: lambda a, b, c: func(func, a, b, c))((functools.lru_cache(maxsize=None))(lambda champagneTower_, poured_, query_row_, query_glass_: poured_ if query_row_ == 0 else (max(champagneTower_(champagneTower_, poured_, query_row_-1, query_glass_-1) - 1, 0) / 2 if query_glass_ == query_row_ else (max(champagneTower_(champagneTower_, poured_, query_row_-1, query_glass_) - 1, 0) / 2 if query_glass_ == 0 else max(champagneTower_(champagneTower_, poured_, query_row_-1, query_glass_-1) - 1, 0) / 2 + max(champagneTower_(champagneTower_, poured_, query_row_-1, query_glass_) - 1, 0) / 2))))(poured, query_row, query_glass), 1.0)